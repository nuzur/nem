// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v5.29.3
// source: tcp_ip_ssh_connection_type_config.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TcpIpSshConnectionTypeConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SshHostname   string                 `protobuf:"bytes,1,opt,name=ssh_hostname,json=sshHostname,proto3" json:"ssh_hostname,omitempty"`
	SshUsername   string                 `protobuf:"bytes,2,opt,name=ssh_username,json=sshUsername,proto3" json:"ssh_username,omitempty"`
	SshPassword   string                 `protobuf:"bytes,3,opt,name=ssh_password,json=sshPassword,proto3" json:"ssh_password,omitempty"`
	SshKeyFile    string                 `protobuf:"bytes,4,opt,name=ssh_key_file,json=sshKeyFile,proto3" json:"ssh_key_file,omitempty"`
	UseSshKeyFile bool                   `protobuf:"varint,5,opt,name=use_ssh_key_file,json=useSshKeyFile,proto3" json:"use_ssh_key_file,omitempty"`
	Hostname      string                 `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port          string                 `protobuf:"bytes,7,opt,name=port,proto3" json:"port,omitempty"`
	Username      string                 `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcpIpSshConnectionTypeConfig) Reset() {
	*x = TcpIpSshConnectionTypeConfig{}
	mi := &file_tcp_ip_ssh_connection_type_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcpIpSshConnectionTypeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpIpSshConnectionTypeConfig) ProtoMessage() {}

func (x *TcpIpSshConnectionTypeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tcp_ip_ssh_connection_type_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpIpSshConnectionTypeConfig.ProtoReflect.Descriptor instead.
func (*TcpIpSshConnectionTypeConfig) Descriptor() ([]byte, []int) {
	return file_tcp_ip_ssh_connection_type_config_proto_rawDescGZIP(), []int{0}
}

func (x *TcpIpSshConnectionTypeConfig) GetSshHostname() string {
	if x != nil {
		return x.SshHostname
	}
	return ""
}

func (x *TcpIpSshConnectionTypeConfig) GetSshUsername() string {
	if x != nil {
		return x.SshUsername
	}
	return ""
}

func (x *TcpIpSshConnectionTypeConfig) GetSshPassword() string {
	if x != nil {
		return x.SshPassword
	}
	return ""
}

func (x *TcpIpSshConnectionTypeConfig) GetSshKeyFile() string {
	if x != nil {
		return x.SshKeyFile
	}
	return ""
}

func (x *TcpIpSshConnectionTypeConfig) GetUseSshKeyFile() bool {
	if x != nil {
		return x.UseSshKeyFile
	}
	return false
}

func (x *TcpIpSshConnectionTypeConfig) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *TcpIpSshConnectionTypeConfig) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *TcpIpSshConnectionTypeConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TcpIpSshConnectionTypeConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_tcp_ip_ssh_connection_type_config_proto protoreflect.FileDescriptor

const file_tcp_ip_ssh_connection_type_config_proto_rawDesc = "" +
	"\n" +
	"'tcp_ip_ssh_connection_type_config.proto\x12\x03nem\"\xba\x02\n" +
	"\x1cTcpIpSshConnectionTypeConfig\x12!\n" +
	"\fssh_hostname\x18\x01 \x01(\tR\vsshHostname\x12!\n" +
	"\fssh_username\x18\x02 \x01(\tR\vsshUsername\x12!\n" +
	"\fssh_password\x18\x03 \x01(\tR\vsshPassword\x12 \n" +
	"\fssh_key_file\x18\x04 \x01(\tR\n" +
	"sshKeyFile\x12'\n" +
	"\x10use_ssh_key_file\x18\x05 \x01(\bR\ruseSshKeyFile\x12\x1a\n" +
	"\bhostname\x18\x06 \x01(\tR\bhostname\x12\x12\n" +
	"\x04port\x18\a \x01(\tR\x04port\x12\x1a\n" +
	"\busername\x18\b \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\t \x01(\tR\bpasswordBC\n" +
	"\x14github.com/nuzur/nemB\x1cTcpIpSshConnectionTypeConfigP\x01Z\vnem/idl/genb\x06proto3"

var (
	file_tcp_ip_ssh_connection_type_config_proto_rawDescOnce sync.Once
	file_tcp_ip_ssh_connection_type_config_proto_rawDescData []byte
)

func file_tcp_ip_ssh_connection_type_config_proto_rawDescGZIP() []byte {
	file_tcp_ip_ssh_connection_type_config_proto_rawDescOnce.Do(func() {
		file_tcp_ip_ssh_connection_type_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_tcp_ip_ssh_connection_type_config_proto_rawDesc), len(file_tcp_ip_ssh_connection_type_config_proto_rawDesc)))
	})
	return file_tcp_ip_ssh_connection_type_config_proto_rawDescData
}

var file_tcp_ip_ssh_connection_type_config_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tcp_ip_ssh_connection_type_config_proto_goTypes = []any{
	(*TcpIpSshConnectionTypeConfig)(nil), // 0: nem.TcpIpSshConnectionTypeConfig
}
var file_tcp_ip_ssh_connection_type_config_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tcp_ip_ssh_connection_type_config_proto_init() }
func file_tcp_ip_ssh_connection_type_config_proto_init() {
	if File_tcp_ip_ssh_connection_type_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_tcp_ip_ssh_connection_type_config_proto_rawDesc), len(file_tcp_ip_ssh_connection_type_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tcp_ip_ssh_connection_type_config_proto_goTypes,
		DependencyIndexes: file_tcp_ip_ssh_connection_type_config_proto_depIdxs,
		MessageInfos:      file_tcp_ip_ssh_connection_type_config_proto_msgTypes,
	}.Build()
	File_tcp_ip_ssh_connection_type_config_proto = out.File
	file_tcp_ip_ssh_connection_type_config_proto_goTypes = nil
	file_tcp_ip_ssh_connection_type_config_proto_depIdxs = nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: updates.sql

package nemdb

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const updateChangeRequest = `-- name: UpdateChangeRequest :exec
UPDATE change_request
SET
version = ?, title = ?, description = ?, review_type = ?, data_changes = ?, version_changes = ?, reviews = ?, owner_uuid = ?, status = ?, created_at = ?, updated_at = ?, created_by_uuid = ?, updated_by_uuid = ?
WHERE uuid = ?
`

type UpdateChangeRequestParams struct {
	Version        int64           `json:"version"`
	Title          string          `json:"title"`
	Description    sql.NullString  `json:"description"`
	ReviewType     int64           `json:"review_type"`
	DataChanges    json.RawMessage `json:"data_changes"`
	VersionChanges json.RawMessage `json:"version_changes"`
	Reviews        json.RawMessage `json:"reviews"`
	OwnerUUID      string          `json:"owner_uuid"`
	Status         int64           `json:"status"`
	CreatedAt      time.Time       `json:"created_at"`
	UpdatedAt      time.Time       `json:"updated_at"`
	CreatedByUUID  string          `json:"created_by_uuid"`
	UpdatedByUUID  string          `json:"updated_by_uuid"`
	UUID           string          `json:"uuid"`
}

func (q *Queries) UpdateChangeRequest(ctx context.Context, arg UpdateChangeRequestParams) error {
	_, err := q.db.ExecContext(ctx, updateChangeRequest,
		arg.Version,
		arg.Title,
		arg.Description,
		arg.ReviewType,
		arg.DataChanges,
		arg.VersionChanges,
		arg.Reviews,
		arg.OwnerUUID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedByUUID,
		arg.UpdatedByUUID,
		arg.UUID,
	)
	return err
}

const updateExtension = `-- name: UpdateExtension :exec
UPDATE extension
SET
version = ?, identifier = ?, display_name = ?, display_author_name = ?, description = ?, url = ?, verfied = ?, repository = ?, extension_type = ?, tags = ?, public = ?, visibility = ?, status = ?, owner_uuid = ?, created_at = ?, updated_at = ?, created_by_uuid = ?, updated_by_uuid = ?
WHERE uuid = ?
`

type UpdateExtensionParams struct {
	Version           int64           `json:"version"`
	Identifier        string          `json:"identifier"`
	DisplayName       sql.NullString  `json:"display_name"`
	DisplayAuthorName sql.NullString  `json:"display_author_name"`
	Description       sql.NullString  `json:"description"`
	URL               sql.NullString  `json:"url"`
	Verfied           bool            `json:"verfied"`
	Repository        string          `json:"repository"`
	ExtensionType     int64           `json:"extension_type"`
	Tags              json.RawMessage `json:"tags"`
	Public            bool            `json:"public"`
	Visibility        json.RawMessage `json:"visibility"`
	Status            int64           `json:"status"`
	OwnerUUID         string          `json:"owner_uuid"`
	CreatedAt         time.Time       `json:"created_at"`
	UpdatedAt         time.Time       `json:"updated_at"`
	CreatedByUUID     string          `json:"created_by_uuid"`
	UpdatedByUUID     string          `json:"updated_by_uuid"`
	UUID              string          `json:"uuid"`
}

func (q *Queries) UpdateExtension(ctx context.Context, arg UpdateExtensionParams) error {
	_, err := q.db.ExecContext(ctx, updateExtension,
		arg.Version,
		arg.Identifier,
		arg.DisplayName,
		arg.DisplayAuthorName,
		arg.Description,
		arg.URL,
		arg.Verfied,
		arg.Repository,
		arg.ExtensionType,
		arg.Tags,
		arg.Public,
		arg.Visibility,
		arg.Status,
		arg.OwnerUUID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedByUUID,
		arg.UpdatedByUUID,
		arg.UUID,
	)
	return err
}

const updateExtensionExecution = `-- name: UpdateExtensionExecution :exec
UPDATE extension_execution
SET
extension_uuid = ?, extension_version_uuid = ?, project_extension_uuid = ?, project_uuid = ?, project_version_uuid = ?, executed_by_uuid = ?, metadata = ?, status = ?, status_msg = ?, created_at = ?, updated_at = ?
WHERE uuid = ?
`

type UpdateExtensionExecutionParams struct {
	ExtensionUUID        string          `json:"extension_uuid"`
	ExtensionVersionUUID string          `json:"extension_version_uuid"`
	ProjectExtensionUUID sql.NullString  `json:"project_extension_uuid"`
	ProjectUUID          string          `json:"project_uuid"`
	ProjectVersionUUID   string          `json:"project_version_uuid"`
	ExecutedByUUID       string          `json:"executed_by_uuid"`
	Metadata             json.RawMessage `json:"metadata"`
	Status               int64           `json:"status"`
	StatusMsg            sql.NullString  `json:"status_msg"`
	CreatedAt            time.Time       `json:"created_at"`
	UpdatedAt            time.Time       `json:"updated_at"`
	UUID                 string          `json:"uuid"`
}

func (q *Queries) UpdateExtensionExecution(ctx context.Context, arg UpdateExtensionExecutionParams) error {
	_, err := q.db.ExecContext(ctx, updateExtensionExecution,
		arg.ExtensionUUID,
		arg.ExtensionVersionUUID,
		arg.ProjectExtensionUUID,
		arg.ProjectUUID,
		arg.ProjectVersionUUID,
		arg.ExecutedByUUID,
		arg.Metadata,
		arg.Status,
		arg.StatusMsg,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UUID,
	)
	return err
}

const updateExtensionVersion = `-- name: UpdateExtensionVersion :exec
UPDATE extension_version
SET
version = ?, extension_uuid = ?, display_version = ?, description = ?, repository_tag = ?, configuration_entity = ?, execution_mode = ?, review_status = ?, status = ?, created_at = ?, updated_at = ?, created_by_uuid = ?, updated_by_uuid = ?
WHERE uuid = ?
`

type UpdateExtensionVersionParams struct {
	Version             int64           `json:"version"`
	ExtensionUUID       string          `json:"extension_uuid"`
	DisplayVersion      sql.NullString  `json:"display_version"`
	Description         sql.NullString  `json:"description"`
	RepositoryTag       string          `json:"repository_tag"`
	ConfigurationEntity json.RawMessage `json:"configuration_entity"`
	ExecutionMode       json.RawMessage `json:"execution_mode"`
	ReviewStatus        int64           `json:"review_status"`
	Status              int64           `json:"status"`
	CreatedAt           time.Time       `json:"created_at"`
	UpdatedAt           time.Time       `json:"updated_at"`
	CreatedByUUID       string          `json:"created_by_uuid"`
	UpdatedByUUID       string          `json:"updated_by_uuid"`
	UUID                string          `json:"uuid"`
}

func (q *Queries) UpdateExtensionVersion(ctx context.Context, arg UpdateExtensionVersionParams) error {
	_, err := q.db.ExecContext(ctx, updateExtensionVersion,
		arg.Version,
		arg.ExtensionUUID,
		arg.DisplayVersion,
		arg.Description,
		arg.RepositoryTag,
		arg.ConfigurationEntity,
		arg.ExecutionMode,
		arg.ReviewStatus,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedByUUID,
		arg.UpdatedByUUID,
		arg.UUID,
	)
	return err
}

const updateOrganization = `-- name: UpdateOrganization :exec
UPDATE organization
SET
version = ?, name = ?, domains = ?, admin_uuids = ?, memberships = ?, status = ?, created_at = ?, updated_at = ?, created_by_uuid = ?, updated_by_uuid = ?
WHERE uuid = ?
`

type UpdateOrganizationParams struct {
	Version       int64           `json:"version"`
	Name          string          `json:"name"`
	Domains       json.RawMessage `json:"domains"`
	AdminUUIDs    json.RawMessage `json:"admin_uuids"`
	Memberships   json.RawMessage `json:"memberships"`
	Status        int64           `json:"status"`
	CreatedAt     time.Time       `json:"created_at"`
	UpdatedAt     time.Time       `json:"updated_at"`
	CreatedByUUID string          `json:"created_by_uuid"`
	UpdatedByUUID string          `json:"updated_by_uuid"`
	UUID          string          `json:"uuid"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, updateOrganization,
		arg.Version,
		arg.Name,
		arg.Domains,
		arg.AdminUUIDs,
		arg.Memberships,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedByUUID,
		arg.UpdatedByUUID,
		arg.UUID,
	)
	return err
}

const updateProject = `-- name: UpdateProject :exec
UPDATE project
SET
version = ?, name = ?, description = ?, tags = ?, url = ?, owner_uuid = ?, team_uuid = ?, project_extensions = ?, status = ?, created_at = ?, updated_at = ?, created_by_uuid = ?, updated_by_uuid = ?
WHERE uuid = ?
`

type UpdateProjectParams struct {
	Version           int64           `json:"version"`
	Name              string          `json:"name"`
	Description       sql.NullString  `json:"description"`
	Tags              json.RawMessage `json:"tags"`
	URL               sql.NullString  `json:"url"`
	OwnerUUID         string          `json:"owner_uuid"`
	TeamUUID          string          `json:"team_uuid"`
	ProjectExtensions json.RawMessage `json:"project_extensions"`
	Status            int64           `json:"status"`
	CreatedAt         time.Time       `json:"created_at"`
	UpdatedAt         time.Time       `json:"updated_at"`
	CreatedByUUID     string          `json:"created_by_uuid"`
	UpdatedByUUID     string          `json:"updated_by_uuid"`
	UUID              string          `json:"uuid"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject,
		arg.Version,
		arg.Name,
		arg.Description,
		arg.Tags,
		arg.URL,
		arg.OwnerUUID,
		arg.TeamUUID,
		arg.ProjectExtensions,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedByUUID,
		arg.UpdatedByUUID,
		arg.UUID,
	)
	return err
}

const updateProjectVersion = `-- name: UpdateProjectVersion :exec
UPDATE project_version
SET
version = ?, identifier = ?, description = ?, project_uuid = ?, entities = ?, relationships = ?, enums = ?, services = ?, base_version_uuid = ?, review_status = ?, deployments = ?, status = ?, created_at = ?, updated_at = ?, created_by_uuid = ?, updated_by_uuid = ?
WHERE uuid = ?
`

type UpdateProjectVersionParams struct {
	Version         int64           `json:"version"`
	Identifier      string          `json:"identifier"`
	Description     string          `json:"description"`
	ProjectUUID     string          `json:"project_uuid"`
	Entities        json.RawMessage `json:"entities"`
	Relationships   json.RawMessage `json:"relationships"`
	Enums           json.RawMessage `json:"enums"`
	Services        json.RawMessage `json:"services"`
	BaseVersionUUID sql.NullString  `json:"base_version_uuid"`
	ReviewStatus    int64           `json:"review_status"`
	Deployments     json.RawMessage `json:"deployments"`
	Status          int64           `json:"status"`
	CreatedAt       time.Time       `json:"created_at"`
	UpdatedAt       time.Time       `json:"updated_at"`
	CreatedByUUID   string          `json:"created_by_uuid"`
	UpdatedByUUID   string          `json:"updated_by_uuid"`
	UUID            string          `json:"uuid"`
}

func (q *Queries) UpdateProjectVersion(ctx context.Context, arg UpdateProjectVersionParams) error {
	_, err := q.db.ExecContext(ctx, updateProjectVersion,
		arg.Version,
		arg.Identifier,
		arg.Description,
		arg.ProjectUUID,
		arg.Entities,
		arg.Relationships,
		arg.Enums,
		arg.Services,
		arg.BaseVersionUUID,
		arg.ReviewStatus,
		arg.Deployments,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedByUUID,
		arg.UpdatedByUUID,
		arg.UUID,
	)
	return err
}

const updateTeam = `-- name: UpdateTeam :exec
UPDATE team
SET
version = ?, name = ?, enviorments = ?, review_configs = ?, memberships = ?, stores = ?, connections = ?, object_stores = ?, organization_uuid = ?, default_entity = ?, status = ?, created_at = ?, updated_at = ?, created_by_uuid = ?, updated_by_uuid = ?
WHERE uuid = ?
`

type UpdateTeamParams struct {
	Version          int64           `json:"version"`
	Name             string          `json:"name"`
	Enviorments      json.RawMessage `json:"enviorments"`
	ReviewConfigs    json.RawMessage `json:"review_configs"`
	Memberships      json.RawMessage `json:"memberships"`
	Stores           json.RawMessage `json:"stores"`
	Connections      json.RawMessage `json:"connections"`
	ObjectStores     json.RawMessage `json:"object_stores"`
	OrganizationUUID sql.NullString  `json:"organization_uuid"`
	DefaultEntity    json.RawMessage `json:"default_entity"`
	Status           int64           `json:"status"`
	CreatedAt        time.Time       `json:"created_at"`
	UpdatedAt        time.Time       `json:"updated_at"`
	CreatedByUUID    string          `json:"created_by_uuid"`
	UpdatedByUUID    string          `json:"updated_by_uuid"`
	UUID             string          `json:"uuid"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) error {
	_, err := q.db.ExecContext(ctx, updateTeam,
		arg.Version,
		arg.Name,
		arg.Enviorments,
		arg.ReviewConfigs,
		arg.Memberships,
		arg.Stores,
		arg.Connections,
		arg.ObjectStores,
		arg.OrganizationUUID,
		arg.DefaultEntity,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedByUUID,
		arg.UpdatedByUUID,
		arg.UUID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user
SET
identifier = ?, name = ?, last_name = ?, email = ?, user_type = ?, country_ios2 = ?, locale = ?, metadata = ?, status = ?, created_at = ?, updated_at = ?
WHERE uuid = ?
`

type UpdateUserParams struct {
	Identifier  string         `json:"identifier"`
	Name        sql.NullString `json:"name"`
	LastName    sql.NullString `json:"last_name"`
	Email       string         `json:"email"`
	UserType    int64          `json:"user_type"`
	CountryIos2 sql.NullString `json:"country_ios2"`
	Locale      sql.NullString `json:"locale"`
	Metadata    sql.NullString `json:"metadata"`
	Status      int64          `json:"status"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	UUID        string         `json:"uuid"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Identifier,
		arg.Name,
		arg.LastName,
		arg.Email,
		arg.UserType,
		arg.CountryIos2,
		arg.Locale,
		arg.Metadata,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UUID,
	)
	return err
}

const updateUserConnection = `-- name: UpdateUserConnection :exec
UPDATE user_connection
SET
user_uuid = ?, project_uuid = ?, project_version_uuid = ?, type = ?, type_config = ?, db_schema = ?, executions = ?, status = ?, created_at = ?, updated_at = ?
WHERE uuid = ?
`

type UpdateUserConnectionParams struct {
	UserUUID           string          `json:"user_uuid"`
	ProjectUUID        string          `json:"project_uuid"`
	ProjectVersionUUID sql.NullString  `json:"project_version_uuid"`
	Type               int64           `json:"type"`
	TypeConfig         json.RawMessage `json:"type_config"`
	DbSchema           string          `json:"db_schema"`
	Executions         json.RawMessage `json:"executions"`
	Status             int64           `json:"status"`
	CreatedAt          time.Time       `json:"created_at"`
	UpdatedAt          time.Time       `json:"updated_at"`
	UUID               string          `json:"uuid"`
}

func (q *Queries) UpdateUserConnection(ctx context.Context, arg UpdateUserConnectionParams) error {
	_, err := q.db.ExecContext(ctx, updateUserConnection,
		arg.UserUUID,
		arg.ProjectUUID,
		arg.ProjectVersionUUID,
		arg.Type,
		arg.TypeConfig,
		arg.DbSchema,
		arg.Executions,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UUID,
	)
	return err
}

const updateUserTeam = `-- name: UpdateUserTeam :exec
UPDATE user_team
SET
user_uuid = ?, user_email = ?, team_uuid = ?, roles = ?, status = ?, created_at = ?, updated_at = ?, created_by_uuid = ?, updated_by_uuid = ?
WHERE uuid = ?
`

type UpdateUserTeamParams struct {
	UserUUID      sql.NullString  `json:"user_uuid"`
	UserEmail     sql.NullString  `json:"user_email"`
	TeamUUID      string          `json:"team_uuid"`
	Roles         json.RawMessage `json:"roles"`
	Status        int64           `json:"status"`
	CreatedAt     time.Time       `json:"created_at"`
	UpdatedAt     time.Time       `json:"updated_at"`
	CreatedByUUID string          `json:"created_by_uuid"`
	UpdatedByUUID string          `json:"updated_by_uuid"`
	UUID          string          `json:"uuid"`
}

func (q *Queries) UpdateUserTeam(ctx context.Context, arg UpdateUserTeamParams) error {
	_, err := q.db.ExecContext(ctx, updateUserTeam,
		arg.UserUUID,
		arg.UserEmail,
		arg.TeamUUID,
		arg.Roles,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedByUUID,
		arg.UpdatedByUUID,
		arg.UUID,
	)
	return err
}
